// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: api/envoy/service/tap/v3/tap.proto

package tapv3

import (
	context "context"
	v3 "github.com/envoyproxy/go-control-plane/envoy/data/tap/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message for reporting tap data. Contains Envoy's trace wrapper and any
// additional contextual information we may want to add at some point.
type TapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tap information exported from Envoy
	TraceData *v3.TraceWrapper `protobuf:"bytes,1,opt,name=trace_data,json=traceData,proto3" json:"trace_data,omitempty"`
}

func (x *TapRequest) Reset() {
	*x = TapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_envoy_service_tap_v3_tap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TapRequest) ProtoMessage() {}

func (x *TapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_envoy_service_tap_v3_tap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TapRequest.ProtoReflect.Descriptor instead.
func (*TapRequest) Descriptor() ([]byte, []int) {
	return file_api_envoy_service_tap_v3_tap_proto_rawDescGZIP(), []int{0}
}

func (x *TapRequest) GetTraceData() *v3.TraceWrapper {
	if x != nil {
		return x.TraceData
	}
	return nil
}

// Response when TapRequest messages are sent. Currently empty and unused.
type TapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TapResponse) Reset() {
	*x = TapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_envoy_service_tap_v3_tap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TapResponse) ProtoMessage() {}

func (x *TapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_envoy_service_tap_v3_tap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TapResponse.ProtoReflect.Descriptor instead.
func (*TapResponse) Descriptor() ([]byte, []int) {
	return file_api_envoy_service_tap_v3_tap_proto_rawDescGZIP(), []int{1}
}

var File_api_envoy_service_tap_v3_tap_proto protoreflect.FileDescriptor

var file_api_envoy_service_tap_v3_tap_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x74, 0x61, 0x70, 0x2f, 0x76, 0x33, 0x2f, 0x74, 0x61, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x33, 0x1a, 0x1f, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x74, 0x61, 0x70, 0x2f, 0x76, 0x33, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x0a, 0x54,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76,
	0x33, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x0d, 0x0a, 0x0b, 0x54, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x62, 0x0a, 0x0a, 0x54, 0x61, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x70, 0x12, 0x20, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x6b, 0x0a, 0x22,
	0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x70, 0x2e,
	0x76, 0x33, 0x42, 0x08, 0x54, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d,
	0x69, 0x6f, 0x2f, 0x74, 0x61, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x61, 0x70,
	0x2f, 0x76, 0x33, 0x3b, 0x74, 0x61, 0x70, 0x76, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_envoy_service_tap_v3_tap_proto_rawDescOnce sync.Once
	file_api_envoy_service_tap_v3_tap_proto_rawDescData = file_api_envoy_service_tap_v3_tap_proto_rawDesc
)

func file_api_envoy_service_tap_v3_tap_proto_rawDescGZIP() []byte {
	file_api_envoy_service_tap_v3_tap_proto_rawDescOnce.Do(func() {
		file_api_envoy_service_tap_v3_tap_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_envoy_service_tap_v3_tap_proto_rawDescData)
	})
	return file_api_envoy_service_tap_v3_tap_proto_rawDescData
}

var file_api_envoy_service_tap_v3_tap_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_envoy_service_tap_v3_tap_proto_goTypes = []interface{}{
	(*TapRequest)(nil),      // 0: envoy.service.tap.v3.TapRequest
	(*TapResponse)(nil),     // 1: envoy.service.tap.v3.TapResponse
	(*v3.TraceWrapper)(nil), // 2: envoy.data.tap.v3.TraceWrapper
}
var file_api_envoy_service_tap_v3_tap_proto_depIdxs = []int32{
	2, // 0: envoy.service.tap.v3.TapRequest.trace_data:type_name -> envoy.data.tap.v3.TraceWrapper
	0, // 1: envoy.service.tap.v3.TapService.ReportTap:input_type -> envoy.service.tap.v3.TapRequest
	1, // 2: envoy.service.tap.v3.TapService.ReportTap:output_type -> envoy.service.tap.v3.TapResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_envoy_service_tap_v3_tap_proto_init() }
func file_api_envoy_service_tap_v3_tap_proto_init() {
	if File_api_envoy_service_tap_v3_tap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_envoy_service_tap_v3_tap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_envoy_service_tap_v3_tap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_envoy_service_tap_v3_tap_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_envoy_service_tap_v3_tap_proto_goTypes,
		DependencyIndexes: file_api_envoy_service_tap_v3_tap_proto_depIdxs,
		MessageInfos:      file_api_envoy_service_tap_v3_tap_proto_msgTypes,
	}.Build()
	File_api_envoy_service_tap_v3_tap_proto = out.File
	file_api_envoy_service_tap_v3_tap_proto_rawDesc = nil
	file_api_envoy_service_tap_v3_tap_proto_goTypes = nil
	file_api_envoy_service_tap_v3_tap_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TapServiceClient is the client API for TapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TapServiceClient interface {
	ReportTap(ctx context.Context, opts ...grpc.CallOption) (TapService_ReportTapClient, error)
}

type tapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTapServiceClient(cc grpc.ClientConnInterface) TapServiceClient {
	return &tapServiceClient{cc}
}

func (c *tapServiceClient) ReportTap(ctx context.Context, opts ...grpc.CallOption) (TapService_ReportTapClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TapService_serviceDesc.Streams[0], "/envoy.service.tap.v3.TapService/ReportTap", opts...)
	if err != nil {
		return nil, err
	}
	x := &tapServiceReportTapClient{stream}
	return x, nil
}

type TapService_ReportTapClient interface {
	Send(*TapRequest) error
	CloseAndRecv() (*TapResponse, error)
	grpc.ClientStream
}

type tapServiceReportTapClient struct {
	grpc.ClientStream
}

func (x *tapServiceReportTapClient) Send(m *TapRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tapServiceReportTapClient) CloseAndRecv() (*TapResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TapResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TapServiceServer is the server API for TapService service.
type TapServiceServer interface {
	ReportTap(TapService_ReportTapServer) error
}

// UnimplementedTapServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTapServiceServer struct {
}

func (*UnimplementedTapServiceServer) ReportTap(TapService_ReportTapServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportTap not implemented")
}

func RegisterTapServiceServer(s *grpc.Server, srv TapServiceServer) {
	s.RegisterService(&_TapService_serviceDesc, srv)
}

func _TapService_ReportTap_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TapServiceServer).ReportTap(&tapServiceReportTapServer{stream})
}

type TapService_ReportTapServer interface {
	SendAndClose(*TapResponse) error
	Recv() (*TapRequest, error)
	grpc.ServerStream
}

type tapServiceReportTapServer struct {
	grpc.ServerStream
}

func (x *tapServiceReportTapServer) SendAndClose(m *TapResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tapServiceReportTapServer) Recv() (*TapRequest, error) {
	m := new(TapRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.service.tap.v3.TapService",
	HandlerType: (*TapServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportTap",
			Handler:       _TapService_ReportTap_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/envoy/service/tap/v3/tap.proto",
}
